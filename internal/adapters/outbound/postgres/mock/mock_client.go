// Code generated by MockGen. DO NOT EDIT.
// Source: internal/adapters/outbound/postgres/client.go
//
// Generated by this command:
//
//	mockgen -source=internal/adapters/outbound/postgres/client.go -destination=internal/adapters/outbound/postgres/mock/mock_client.go -package=mock_sqlc
//

// Package mock_sqlc is a generated GoMock package.
package mock_sqlc

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	sqlc "github.com/teamkweku/code-odessey-hex-arch/internal/adapters/outbound/postgres/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// Mockqueries is a mock of queries interface.
type Mockqueries struct {
	ctrl     *gomock.Controller
	recorder *MockqueriesMockRecorder
}

// MockqueriesMockRecorder is the mock recorder for Mockqueries.
type MockqueriesMockRecorder struct {
	mock *Mockqueries
}

// NewMockqueries creates a new mock instance.
func NewMockqueries(ctrl *gomock.Controller) *Mockqueries {
	mock := &Mockqueries{ctrl: ctrl}
	mock.recorder = &MockqueriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockqueries) EXPECT() *MockqueriesMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *Mockqueries) CreateUser(ctx context.Context, arg sqlc.CreateUserParams) (sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockqueriesMockRecorder) CreateUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*Mockqueries)(nil).CreateUser), ctx, arg)
}

// DeleteUser mocks base method.
func (m *Mockqueries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockqueriesMockRecorder) DeleteUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*Mockqueries)(nil).DeleteUser), ctx, id)
}

// GetUserByEmail mocks base method.
func (m *Mockqueries) GetUserByEmail(ctx context.Context, email string) (sqlc.GetUserByEmailRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(sqlc.GetUserByEmailRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockqueriesMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*Mockqueries)(nil).GetUserByEmail), ctx, email)
}

// GetUserById mocks base method.
func (m *Mockqueries) GetUserById(ctx context.Context, id uuid.UUID) (sqlc.GetUserByIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", ctx, id)
	ret0, _ := ret[0].(sqlc.GetUserByIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockqueriesMockRecorder) GetUserById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*Mockqueries)(nil).GetUserById), ctx, id)
}

// UpdateUser mocks base method.
func (m *Mockqueries) UpdateUser(ctx context.Context, arg sqlc.UpdateUserParams) (sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, arg)
	ret0, _ := ret[0].(sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockqueriesMockRecorder) UpdateUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*Mockqueries)(nil).UpdateUser), ctx, arg)
}

// UserExists mocks base method.
func (m *Mockqueries) UserExists(ctx context.Context, id uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserExists", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserExists indicates an expected call of UserExists.
func (mr *MockqueriesMockRecorder) UserExists(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserExists", reflect.TypeOf((*Mockqueries)(nil).UserExists), ctx, id)
}
